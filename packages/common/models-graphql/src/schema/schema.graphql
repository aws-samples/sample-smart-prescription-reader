# Represents details about an error that occurred during processing
type ErrorDetail @aws_cognito_user_pools @aws_iam {
  # Error code identifying the type of error
  code: String!
  # Human readable error message describing what went wrong
  message: String!
}

# Enum representing the different processing states a job can be in
enum JobStateEnum {
  TRANSCRIBE
  EXTRACT
  JUDGE
  CORRECT
}

# Enum representing the overall status of a prescription processing job
enum JobStatusEnum {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

# Represents usage metrics for a model execution
type ModelUsage @aws_cognito_user_pools @aws_iam {
  # Number of input tokens consumed by the model
  inputTokens: Int!
  # Number of output tokens generated by the model
  outputTokens: Int
  # Number of input tokens saved with cache
  cacheReadInputTokens: Int
  # Description of the task performed by the model
  task: String
}

# Prescription processing job status
type PrescriptionJob @aws_cognito_user_pools @aws_iam {
  # Timestamp when the job was created
  createdAt: AWSDateTime!
  # Error details if job failed
  error: ErrorDetail
  # Unique identifier for the prescription job
  jobId: ID!
  # Additional message or status information
  message: String
  # Owner/creator of the prescription job
  owner: String
  # JSON data containing the extracted prescription information
  prescriptionData: AWSJSON
  # Confidence score of the extraction
  score: String
  # Current processing state of the job
  state: JobStateEnum
  # Current status of the job
  status: JobStatusEnum!
  # Time-to-live timestamp for the job record
  ttl: Int!
  # Timestamp when the job was last updated
  updatedAt: AWSDateTime!
  # Array of model usage metrics for this job
  usage: [ModelUsage]
}

# Response containing presigned URL information for file uploads
type PresignedUrlResponse {
  # The S3 object key where the file will be stored
  objectKey: String
  # The presigned URL that can be used to upload the file
  url: String!
}

# Input parameters for processing a prescription image
input ProcessPrescriptionInput {
  # S3 key of the prescription image
  image: String!
  # JSON schema defining the prescription data structure
  prescriptionSchema: String!
  # Temperature parameter for model inference (controls randomness)
  temperature: Float
  # ID of the fast model to use for initial processing
  fastModel: String
  # ID of the model to use for judging extraction accuracy
  judgeModel: String
  # ID of the powerful model to use for complex processing
  powerfulModel: String
  # Whether to use Amazon Textract for text extraction
  useTextract: Boolean
  # Maximum number of correction cycles
  maxCorrections: Int
}

# Input parameters for requesting a file upload URL
input RequestUploadFileInput {
  # Name of the file to be uploaded
  fileName: String!
  # URL expiration time in seconds
  expiration: Int
}

type Mutation {
  # Process a prescription image to extract data
  processPrescription(input: ProcessPrescriptionInput!): PrescriptionJob!
  # Get a presigned URL for uploading a file
  requestUploadFile(input: RequestUploadFileInput!): PresignedUrlResponse!
}

type Query {
  # Get the current status and details of a prescription processing job
  getJobStatus(jobId: String!): PrescriptionJob!
    @aws_iam
    @aws_cognito_user_pools
}

schema {
  query: Query
  mutation: Mutation
}
